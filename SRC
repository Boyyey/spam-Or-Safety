import os
import zipfile
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.optimizers import Adam
import tkinter as tk
from tkinter import messagebox

# Step 1: Extract the ZIP file (adjust path as needed)
zip_file_path = r'C:\Users\MEHR\Downloads\sms+spam+collection.zip'  # Path to your ZIP file in Downloads
extracted_folder = r'C:\Users\MEHR\Downloads\extracted_files'

if not os.path.exists(extracted_folder):
    os.makedirs(extracted_folder)

with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
    zip_ref.extractall(extracted_folder)

# Check the extracted files
print(f"Extracted files: {os.listdir(extracted_folder)}")

# Step 2: Load the dataset
sms_file = os.path.join(extracted_folder, 'SMSSpamCollection')  # Adjust path if necessary
df = pd.read_csv(sms_file, sep='\t', header=None, names=["Label", "Message"])

# Step 3: Preprocess the data (Vectorization)
vectorizer = TfidfVectorizer(stop_words='english')
X = vectorizer.fit_transform(df['Message']).toarray()  # Ensure data is in array format
y = df['Label'].map({'ham': 0, 'spam': 1}).values  # Convert labels to numerical format

# Step 4: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Build and train a Neural Network model
model = models.Sequential([
    layers.InputLayer(input_shape=(X_train.shape[1],)),  # Input layer with shape matching feature count
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer=Adam(), loss='binary_crossentropy', metrics=['accuracy'])

# Step 6: Train the model
model.fit(X_train, y_train, epochs=5, batch_size=64, validation_data=(X_test, y_test))

# Step 7: Save the model
model.save('sms_spam_classifier_model.h5')
print("Model saved as 'sms_spam_classifier_model.h5'")

# Step 8: Predict function for new message
def predict_spam(message):
    new_message_vec = vectorizer.transform([message]).toarray()  # Ensure vector is in array format
    prediction = model.predict(new_message_vec)
    return "Spam" if prediction[0] > 0.5 else "Ham"

# Step 9: GUI setup
def on_predict_button_click():
    message = message_entry.get()
    if not message:
        messagebox.showwarning("Input Error", "Please enter a message.")
        return
    prediction = predict_spam(message)
    messagebox.showinfo("Prediction", f"The message is classified as: {prediction}")

# Creating the GUI window
root = tk.Tk()
root.title("SMS Spam Classifier")
root.geometry("400x200")

# Creating input field for message
message_label = tk.Label(root, text="Enter your message:")
message_label.pack(pady=10)

message_entry = tk.Entry(root, width=40)
message_entry.pack(pady=5)

# Creating the predict button
predict_button = tk.Button(root, text="Predict", command=on_predict_button_click)
predict_button.pack(pady=20)

# Run the GUI loop
root.mainloop()
